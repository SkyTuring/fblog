<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docker安装软件</title>
      <link href="/fblog/2021/03/19/docker/docker-an-zhuang-ruan-jian/"/>
      <url>/fblog/2021/03/19/docker/docker-an-zhuang-ruan-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="wikijs"><a href="#wikijs" class="headerlink" title="wikijs"></a>wikijs</h3><pre class=" language-shell"><code class="language-shell">docker run -d -p 8080:3000 --name wiki \--restart unless-stopped \-e "DB_TYPE=mysql" \-e "DB_HOST=ip" \-e "DB_PORT=33306" \-e "DB_USER=user" \-e "DB_PASS=pass" \-e "DB_NAME=wiki" requarks/wiki</code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>navicat连接mysql出现2059错误</title>
      <link href="/fblog/2021/03/19/docker/mysql2059/"/>
      <url>/fblog/2021/03/19/docker/mysql2059/</url>
      
        <content type="html"><![CDATA[<p>错误出现的原因是在mysql8之前的版本中加密规则为mysql_native_password，而在mysql8以后的加密规则为caching_sha2_password。</p><p>解决此问题有两种方法，一种是更新navicat驱动来解决此问题，一种是将mysql用户登录的加密规则修改为mysql_native_password。建议采取了第二种方式：</p><p>用管理员权限打开cmd，输入mysql -u root -p进入输入密码后进入mysql数据库；</p><p>进入数据库</p><pre class=" language-sql"><code class="language-sql">mysql <span class="token operator">-</span>u root <span class="token operator">-</span>p<span class="token keyword">use</span> mysql</code></pre><p>修改加密规则</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">'root'</span>@'<span class="token operator">%</span><span class="token string">' IDENTIFIED BY '</span>yourpassword' PASSWORD EXPIRE NEVER<span class="token punctuation">;</span> </code></pre><p>修改密码</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">'root'</span>@'<span class="token operator">%</span><span class="token string">' IDENTIFIED WITH mysql_native_password BY '</span>yourpassword'<span class="token punctuation">;</span> </code></pre><p>刷新数据</p><pre class=" language-sql"><code class="language-sql">FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span> </code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背包问题</title>
      <link href="/fblog/2021/03/06/bei-bao-wen-ti/"/>
      <url>/fblog/2021/03/06/bei-bao-wen-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="开门见山"><a href="#开门见山" class="headerlink" title="开门见山"></a>开门见山</h3><p>背包问题是动态规划中非常典型的例题，新手较为难懂，因为背包问题的动态转移方程不是那么容易直接看出来的，但是理解后会发现实现起来变得非常机械，直接套用动态转移方程即可。看到的大多数资料都是各种奇怪的语法写伪代码，不太好理解，记忆反而不方便，下面直接给出转态转移方程得到的部分代码，可以直接记忆，后续再逐步分析推导，深入理解，加深记忆。</p><h4 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h4><p>问题：给定n种物品和一背包。物品 i 的重量为w[i]，其价值为 v[i]，背包的容量为c。问应该如何选择装入背包中的物品，使得装入背包中物品的总价值最大？</p><blockquote><p>定义<code>dp[i][j] </code>表示 把前<code>i</code>个物品装进容器为<code>j</code>的背包可以获得的最大价值</p></blockquote><p>01背包问题部分代码：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> c<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> w<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> w<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> v<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 空间优化后</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> c<span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> w<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> w<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> v<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h4><p>完全背包与01背包不同就是每种物品可以有无限多个。</p><p>完全背包问题部分代码：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> c<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> w<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> w<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> v<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 空间优化后</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> c<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> w<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> w<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> v<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h4 id="01背包-1"><a href="#01背包-1" class="headerlink" title="01背包"></a>01背包</h4><p>背包问题的状态的转移方程是不太可能直接看出来的，需要通过表格的方式逐步推导，了解了具体的计算过程，下面使用具体的计算数据为例，背包容量为10，3件物品，重量分别为3,4,5，价值分别为4,5,6</p><table><thead><tr><th></th><th></th><th></th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th></tr></thead><tbody><tr><td>重量</td><td>价值</td><td>物品</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>3</td><td>4</td><td>1</td><td><font color="#0000ff">0</font></td><td>0</td><td>0</td><td>4</td><td><font color="#0000ff">4</font></td><td>4</td><td>4</td><td>4</td><td>4</td><td>4</td><td>4</td></tr><tr><td>4</td><td>5</td><td>2</td><td>0</td><td>0</td><td>0</td><td>4</td><td><font color="#ff0000">5</font></td><td>5</td><td>5</td><td>9</td><td>9</td><td>9</td><td>9</td></tr><tr><td>5</td><td>6</td><td>3</td><td>0</td><td>0</td><td>0</td><td>4</td><td>5</td><td>6</td><td>6</td><td>9</td><td>10</td><td>11</td><td>11</td></tr></tbody></table><p>上表中第一列代表背包容量为1-10的，表中数据为对应容量下，背包可以装下物品的最大价值。为了计算方便，同样也考虑了没有物品和背包容量为0时候的值，</p><p>在只有物品1的情况下，第一行在容量3以上全部为4，也即物品1的价值，因为这个时候只能拿物品1。为啥3以下为0，很容易理解，因为背包装不下，因此可以可到一个条件就是背包容量需要大于当前物品的重量，否则不用考虑。</p><p>在引入物品2后，判断变得不一样，在容量为4的情况下，背包既可以装物品1，也可以装物品2，显然这个时候需要选择物品2，因为价值更大，在只考虑物品1的情况，容量为4的时候，最大价值为4，而在不选物品1，选物品2的情况下，最大价值是5，这里存在比较，比较条件为，不选物品2和选择物品2，不选的值为之前不考虑物品2时，和当前容量一样的值，也即图中蓝色的4，选的值为当前容量减去物品2的重量时背包可以装下的最大值，也即图中蓝色的零，在加上物品2的价值，发现选物品2的价值更大，于是选择物品2，这样便得到图中红色数字5，为此可以得到如下规律。</p><blockquote><p>第<code>i</code>个装不下时，所得价值为<code>dp[i - 1][j] </code><br>第<code>i</code>个可以装的下，所得价值为max(<code>dp[i - 1][j]</code>, <code>dp[i - 1][j - w[i]] + v[i]</code>);</p></blockquote><p>根据这个规律便可以得到全表，也即可以得到考虑全部物品，不同容量背包得到的物品的最大价值。</p><h4 id="完全背包-1"><a href="#完全背包-1" class="headerlink" title="完全背包"></a>完全背包</h4><p>与01背包不同是，同一个物品可以无限制取，但是毕竟容量有限，一件物品不可能无限装，有最大上限，即<code>c/w[i]</code>，如此就可以将物品<code>i</code>扩展成<code>c/w[i]</code>个，然后再按照01背包的规律便可以得到如下的表格。</p><table><thead><tr><th></th><th></th><th></th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th></tr></thead><tbody><tr><td>重量</td><td>价值</td><td>物品</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>3</td><td>4</td><td>1-1</td><td>0</td><td>0</td><td>0</td><td>4</td><td>4</td><td>4</td><td>4</td><td>4</td><td>4</td><td>4</td><td>4</td></tr><tr><td>3</td><td>4</td><td>1-2</td><td>0</td><td>0</td><td>0</td><td>4</td><td>4</td><td>4</td><td>8</td><td>8</td><td>8</td><td>8</td><td>8</td></tr><tr><td>3</td><td>4</td><td>1-3</td><td>0</td><td>0</td><td>0</td><td>4</td><td>4</td><td>4</td><td>8</td><td>8</td><td>8</td><td>12</td><td>12</td></tr><tr><td>4</td><td>5</td><td>2-1</td><td>0</td><td>0</td><td>0</td><td>4</td><td>5</td><td>5</td><td>8</td><td>9</td><td>9</td><td>12</td><td>13</td></tr><tr><td>4</td><td>5</td><td>2-2</td><td>0</td><td>0</td><td>0</td><td>4</td><td>5</td><td>5</td><td>8</td><td>9</td><td>10</td><td>12</td><td>13</td></tr><tr><td>5</td><td>6</td><td>3-1</td><td>0</td><td>0</td><td>0</td><td>4</td><td>5</td><td>6</td><td>8</td><td>9</td><td>10</td><td>12</td><td>13</td></tr><tr><td>5</td><td>6</td><td>3-2</td><td>0</td><td>0</td><td>0</td><td>4</td><td>5</td><td>6</td><td>8</td><td>9</td><td>10</td><td>12</td><td>13</td></tr></tbody></table><p><del>这里分割的方式也可以使用二进制的方式进行优化，这里不做详述</del></p><p>按照这样扩展可以得到最终答案，但是性能有些不足，需要做些优化，对于上表只保留每种物品最后一个物品的值，去除其他行数据，如此便可以得到下面的表格。</p><table><thead><tr><th></th><th></th><th></th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th></tr></thead><tbody><tr><td>重量</td><td>价值</td><td>物品</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>3</td><td>4</td><td>1</td><td>0</td><td>0</td><td>0</td><td>4</td><td>4</td><td>4</td><td>8</td><td><font color="#0000ff">8</font></td><td>8</td><td>12</td><td>12</td></tr><tr><td>4</td><td>5</td><td>2</td><td>0</td><td>0</td><td>0</td><td><font color="#0000ff">4</font></td><td>5</td><td>5</td><td>8</td><td><font color="#ff0000">9</font></td><td>10</td><td>12</td><td>13</td></tr><tr><td>5</td><td>6</td><td>3</td><td>0</td><td>0</td><td>0</td><td>4</td><td>5</td><td>6</td><td>8</td><td>9</td><td>10</td><td>12</td><td>13</td></tr></tbody></table><p>对比与01背包问题，该表格也有一定的计算规律。在只考虑第一种物品时，由于可以再取，在容量为6时与01背包有所不同，可以取两次物品1得到最大价值为8，以图中红色的9为例，当背包容量为7时，考虑是否取物品2时，需要比较的是，不考虑物品2，值为图中上一列蓝色的8，考虑物品2，图中同列蓝色的4，位置为当前背包容量减当前物品重量，值再加上物品2的价值。于是便得到如下规律</p><blockquote><p>第<code>i</code>个装不下时，所得价值为<code>dp[i - 1][j] </code><br>第<code>i</code>个可以装的下，所得价值为max(<code>dp[i - 1][j]</code>, <code>dp[i][j - w[i]] + v[i]</code>);<br>与01背包二者区别在于使用同一列数据做计算。</p></blockquote><h4 id="空间优化"><a href="#空间优化" class="headerlink" title="空间优化"></a>空间优化</h4><p>在计算的过程中，对于已经计算过数据其实后续不会再使用，最终也不会再用到，于是可以将二维数组压缩成为一维，这种方式便是滚动数组，得到优化后的状态转移方程。</p><blockquote><p><code>dp[j] = max(dp[j],dp[j - w[i]] + v[i])</code></p></blockquote><p>这时会惊奇的发现01背包和完全背包是一样的，确实是一样，但是计算方式上存在差异，对于01背包因为每次计算需要使用上一列的数值，所以在计算时需要反向计算，这样便可以保证，使用之前数值时是未更新之前的，而完全背包需要正向计算，这样使用前值便是更新后的值。</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>通过上述表格逐步计算，得到状态转移方程，为了强化记忆，需要一些例题巩固，因为背包问题是一种思想，而不是一类问题，解决问题时，可能不太容易看出是背包问题，或者可以使用背包的思想，需要自己去抽象。什么对应背包，什么对应物品，需要是情况而定。</p><h4 id="最后一块石头的重量-II"><a href="#最后一块石头的重量-II" class="headerlink" title="最后一块石头的重量 II"></a>最后一块石头的重量 II</h4><p><a href="https://leetcode-cn.com/problems/last-stone-weight-ii/">https://leetcode-cn.com/problems/last-stone-weight-ii/</a></p><p>可以抽象为将石头分为两组，对应这物品取和不取，两组总重量差值最小，也就是让需要取的那组重量最大，这样的最大重量便是一种抽象的背包。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">lastStoneWeightII</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>stones<span class="token punctuation">,</span> <span class="token keyword">int</span> stonesSize<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stonesSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+</span><span class="token operator">=</span> stones<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> bagSize <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>dp <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>bagSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stonesSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> bagSize<span class="token punctuation">;</span> j <span class="token operator">>=</span> stones<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> stones<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> stones<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> dp<span class="token punctuation">[</span>bagSize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="零钱兑换"><a href="#零钱兑换" class="headerlink" title="零钱兑换"></a>零钱兑换</h4><p><a href="https://leetcode-cn.com/problems/coin-change/">https://leetcode-cn.com/problems/coin-change/</a></p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">coinChange</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>coins<span class="token punctuation">,</span> <span class="token keyword">int</span> coinsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>amount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> amount<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> INT_MAX <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> coinsSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> amount<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmin</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span> <span class="token operator">==</span> INT_MAX <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">:</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="一和零"><a href="#一和零" class="headerlink" title="一和零"></a>一和零</h4><p><a href="https://leetcode-cn.com/problems/ones-and-zeroes/">https://leetcode-cn.com/problems/ones-and-zeroes/</a></p><p>0和1是两种不同维度的约束条件，是二维背包问题。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">findMaxForm</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> strs<span class="token punctuation">,</span> <span class="token keyword">int</span> strsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>count0 <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>strsSize<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>count1 <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>strsSize<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span> <span class="token operator">?</span> count0<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span> <span class="token punctuation">:</span> count1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> m<span class="token punctuation">;</span> j <span class="token operator">>=</span> count0<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> n<span class="token punctuation">;</span> k <span class="token operator">>=</span> count1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> count0<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> count1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>背包问题是动态规划中非常典型的例题，新手较为难懂，理解后编码会变得非常机械，</p><p>不是所有问题都可以明显看出可以使用背包的思想，需要具体问题具体分析，对不同概念抽象成背包和物品，再套用动态转移方程即可。</p><p>01背包和完全背包都可以进行空间优化将二维压缩成一维，二者的状态转移方程相同，不同的是计算方向。</p><p>实际编码时，可以通过遍历的范围和边界优化下判断条件，<code>dp</code>数组一般从1开始计数，防止在减一时候出错。</p><p>更多背包问题可以参考:    <a href="https://github.com/tianyicui/pack/blob/master/V2.pdf">背包九讲</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown基础语法</title>
      <link href="/fblog/2021/03/05/markdown/markdown-ji-chu-yu-fa/"/>
      <url>/fblog/2021/03/05/markdown/markdown-ji-chu-yu-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>Markdown支持6种级别的标题，对应html标签 <strong>h1 ~ h6</strong></p><pre class=" language-md"><code class="language-md"># h1## h2### h3#### h4##### h5###### h6</code></pre><h3 id="段落及区块引用"><a href="#段落及区块引用" class="headerlink" title="段落及区块引用"></a>段落及区块引用</h3><p>需要记住的是，Markdown其实就是一种易于编写的普通文本，只不过加入了部分渲染文本的标签而已。其最终依然会转换为html标签，因此使用Markdown分段非常简单，前后至少保留一个空行即可。</p><p>而另外一个比较常见的需求就是，我们可能希望对某段文字进行强调处理。Markdown提供了一个特殊符号&gt;用于段首进行强调，被强调的文字部分将会高亮显示</p><pre class=" language-md"><code class="language-md">> 这段文字将被高亮显示...</code></pre><p>以上标记显示效果如下：</p><blockquote><p>这段文字将被高亮显示…</p></blockquote><h3 id="插入链接或图片"><a href="#插入链接或图片" class="headerlink" title="插入链接或图片"></a>插入链接或图片</h3><p>Markdown针对链接和图片的处理也比较简单，可以使用下面的语法进行标记</p><pre class=" language-md"><code class="language-md">[点击跳转至百度](http://www.baidu.com)![图片标题](https://img.alicdn.com/tfs/TB1WeJ9Xrj1gK0jSZFuXXcrHpXa-195-195.png)</code></pre><p>注： 引用图片和链接的唯一区别就是在最前方添加一个感叹号。</p><p><a href="http://www.baidu.com/">点击跳转至百度</a><br><img src="https://img.alicdn.com/tfs/TB1WeJ9Xrj1gK0jSZFuXXcrHpXa-195-195.png" alt="图片标题"></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>Markdown支持有序列表和无序列表两种形式：</p><ul><li>无序列表使用*或+或-标识</li><li>有序列表使用数字加.标识，例如：1.</li></ul><pre class=" language-md"><code class="language-md">* 黄瓜* 玉米+ 黄瓜+ 玉米- 黄瓜- 玉米1. 黄瓜2. 玉米</code></pre><p>以上标记显示效果如下：</p><ul><li>黄瓜</li><li>玉米</li></ul><ul><li>黄瓜</li><li>玉米</li></ul><ul><li>黄瓜</li><li>玉米</li></ul><ol><li>黄瓜</li><li>玉米</li></ol><h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><p>有时候，为了排版漂亮，可能会加入分隔线。Markdown加入分隔线非常简单，使用下面任意一种形式都可以</p><pre class=" language-md"><code class="language-md">***---</code></pre><hr><hr><p>产生分隔线的语法要求比较松，符号之间添加空格也可以。</p><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>有时候，我们希望对某一部分文字进行强调，使用*或_包裹即可。使用单一符号标记的效果是斜体，使用两个符号标记的效果是加粗</p><pre class=" language-md"><code class="language-md">*这里是斜体*_这里是斜体_**这里是加粗**__这里是加粗__</code></pre><p><em>这里是斜体</em><br> <em>这里是斜体</em></p><p><strong>这里是加粗</strong><br> <strong>这里是加粗</strong></p><h2 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h2><h3 id="插入代码块"><a href="#插入代码块" class="headerlink" title="插入代码块"></a>插入代码块</h3><p>Markdown在IT圈子里面比较流行的一个重要原因是，它能够轻松漂亮地插入代码。</p><p>方法是，使用反引号`进行包裹即可。如果是行内代码引用，使用单个反引号进行包裹</p><p>这是一段<code>var x = 3</code>行内代码</p><p>如果插入一整段代码，需要至少使用两个以上反引号进行包裹， 看效果：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> Int<span class="token punctuation">,</span> y<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">}</span></code></pre><p>注：很多人不知道怎么输入反引号。在英文模式下，找到键盘最左侧esc键下面的第一个键点击即可。</p><h3 id="插入表格"><a href="#插入表格" class="headerlink" title="插入表格"></a>插入表格</h3><p>表格是Markdown语法中比较复杂的一个，其语法如下：</p><pre class=" language-md"><code class="language-md">表头|条目一|条目二:---:|:---:|:---:项目|项目一|项目二</code></pre><p>以上标记显示效果如下：</p><table><thead><tr><th align="center">表头</th><th align="center">条目一</th><th align="center">条目二</th></tr></thead><tbody><tr><td align="center">项目</td><td align="center">项目一</td><td align="center">项目二</td></tr></tbody></table><p>注：三个短斜杠左右的冒号用于控制对齐方式，只放置左边冒号表示文字居左，只放置右边冒号表示文字居右，如果两边都放置冒号表示文字居中。</p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="特殊符号处理"><a href="#特殊符号处理" class="headerlink" title="特殊符号处理"></a>特殊符号处理</h3><p>Markdown使用反斜杠\插入语法中用到的特殊符号。在Markdown中，主要有以下几种特殊符号需要处理：</p><pre class=" language-md"><code class="language-md">\   反斜线`   反引号*   星号_   底线{}  花括号[]  方括号()  括弧#   井号+   加号-   减号.   英文句点!   惊叹号</code></pre><p>例如，如果你需要插入反斜杠，就连续输入两个反斜杠即可：\ =&gt; \ 。</p><p>注：在内容中输入以上特殊符号的时候一定要注意转义，否则将导致内容显示不全，甚至排版混乱。</p><h3 id="如何给文字上色"><a href="#如何给文字上色" class="headerlink" title="如何给文字上色"></a>如何给文字上色</h3><p>Markdown的最初目标就是为纯写作而生的。因此，它并没有考虑文字颜色这一点。但是可以使用html的标签来设置颜色</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>#ff0000<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>设置颜色为红色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>#0000ff<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>设置颜色为蓝色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span></code></pre><p>效果如下</p><p><font color="#ff0000">设置颜色为红色</font><br><font color="#0000ff">设置颜色为蓝色</font></p>]]></content>
      
      
      <categories>
          
          <category> 通用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装</title>
      <link href="/fblog/2021/03/05/docker/docker-an-zhuang/"/>
      <url>/fblog/2021/03/05/docker/docker-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h3 id="安装CentOS-Docker"><a href="#安装CentOS-Docker" class="headerlink" title="安装CentOS Docker"></a>安装CentOS Docker</h3><p>Docker 支持以下的 64 位 CentOS 版本：</p><ul><li>CentOS 7</li><li>CentOS 8</li><li>更高版本…</li></ul><h4 id="官方安装脚本"><a href="#官方安装脚本" class="headerlink" title="官方安装脚本"></a>官方安装脚本</h4><p>安装命令如下：</p><pre class=" language-shell"><code class="language-shell">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</code></pre><p>也可以使用国内 daocloud 一键安装命令：</p><pre class=" language-sh"><code class="language-sh">curl -sSL https://get.daocloud.io/docker | sh</code></pre><h4 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h4><ul><li>卸载旧版本</li></ul><p>较旧的 Docker 版本称为 docker 或 docker-engine 。如果已安装这些程序，请卸载它们以及相关的依赖项。</p><pre class=" language-shell"><code class="language-shell">sudo yum remove docker \         docker-client \         docker-client-latest \         docker-common \         docker-latest \         docker-latest-logrotate \         docker-logrotate \         docker-engine</code></pre><h3 id="安装-Docker-Engine-Community"><a href="#安装-Docker-Engine-Community" class="headerlink" title="安装 Docker Engine-Community"></a>安装 Docker Engine-Community</h3><h4 id="Docker-仓库进行安装"><a href="#Docker-仓库进行安装" class="headerlink" title="Docker 仓库进行安装"></a>Docker 仓库进行安装</h4><p>在新主机上首次安装 Docker Engine-Community 之前，需要设置 Docker 仓库。之后，您可以从仓库安装和更新 Docker。</p><p><strong>设置仓库</strong></p><p>安装所需的软件包。yum-utils 提供了 yum-config-manager ，并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2。</p><pre class=" language-shell"><code class="language-shell">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</code></pre><p>使用以下命令来设置稳定的仓库。</p><h4 id="官方源地址（比较慢）"><a href="#官方源地址（比较慢）" class="headerlink" title="官方源地址（比较慢）"></a>官方源地址（比较慢）</h4><pre class=" language-shell"><code class="language-shell">sudo yum-config-manager --add-repo \    https://download.docker.com/linux/centos/docker-ce.repo</code></pre><p>可以选择国内的一些源地址：</p><ul><li>阿里云</li></ul><pre class=" language-shell"><code class="language-shell">sudo yum-config-manager --add-repo \    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></pre><ul><li>清华大学源</li></ul><pre class=" language-shell"><code class="language-shell">sudo yum-config-manager --add-repo \    https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/docker-ce.repo</code></pre><p>安装最新版本的 Docker Engine-Community 和 containerd，或者转到下一步安装特定版本：</p><pre class=" language-shell"><code class="language-shell">sudo yum install docker-ce docker-ce-cli containerd.io</code></pre><p>如果提示您接受 GPG 密钥，请选是。</p><blockquote><p><strong>有多个 Docker 仓库吗？</strong></p><p>如果启用了多个 Docker 仓库，则在未在 yum install 或 yum update 命令中指定版本的情况下，进行的安装或更新将始终安装最高版本，这可能不适合您的稳定性需求。</p></blockquote><p>Docker 安装完默认未启动。并且已经创建好 docker 用户组，但该用户组下没有用户。</p><p><strong>要安装特定版本的 Docker Engine-Community，请在存储库中列出可用版本，然后选择并安装：</strong></p><p>1、列出并排序您存储库中可用的版本。此示例按版本号（从高到低）对结果进行排序。</p><pre class=" language-shell"><code class="language-shell">yum list docker-ce --showduplicates | sort -rdocker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stabledocker-ce.x86_64  3:18.09.0-3.el7                     docker-ce-stabledocker-ce.x86_64  18.06.1.ce-3.el7                    docker-ce-stabledocker-ce.x86_64  18.06.0.ce-3.el7                    docker-ce-stable</code></pre><p>2、通过其完整的软件包名称安装特定版本，该软件包名称是软件包名称（docker-ce）加上版本字符串（第二列），从第一个冒号（:）一直到第一个连字符，并用连字符（-）分隔。例如：docker-ce-18.09.1。</p><pre class=" language-shell"><code class="language-shell">sudo yum install docker-ce-<VERSION_STRING> docker-ce-cli-<VERSION_STRING> containerd.io</code></pre><p>启动 Docker。</p><pre class=" language-shell"><code class="language-shell">sudo systemctl start docker</code></pre><p>通过运行 hello-world 映像来验证是否正确安装了 Docker Engine-Community 。</p><pre class=" language-shell"><code class="language-shell">sudo docker run hello-world</code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言小知识</title>
      <link href="/fblog/2021/03/04/c-tips/"/>
      <url>/fblog/2021/03/04/c-tips/</url>
      
        <content type="html"><![CDATA[<h4 id="指针降级"><a href="#指针降级" class="headerlink" title="指针降级"></a>指针降级</h4><p>对于一个数组，sizeof运算符返回数组元素的个数；但是如果把数组作为参数传入一个函数就会发生指针降级，这时sizeof运算符就会返回一个指针的大小</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出40</span>    <span class="token function">fun</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出4</span>    <span class="token keyword">int</span> <span class="token operator">*</span>arrayPoint <span class="token operator">=</span> array<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>arrayPoint<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出4</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/fblog/2021/03/04/markdown/markdownsequence/"/>
      <url>/fblog/2021/03/04/markdown/markdownsequence/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是时序图"><a href="#什么是时序图" class="headerlink" title="什么是时序图"></a>什么是时序图</h3><ul><li>时序图, 又名序列图、循序图、顺序图，是一种UML交互图。</li><li>它通过描述对象之间发送消息的时间顺序显示多个对象之间的动态协作。</li><li>它可以表示用例的行为顺序</li></ul><h4 id="时序图的作用"><a href="#时序图的作用" class="headerlink" title="时序图的作用"></a>时序图的作用</h4><ul><li>用来描述接口的功能, 弥补原型图在逻辑细节上的不足</li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><img src="markdownSequence-1.png" alt="一张图看懂时序图语法" style="zoom:50%;"><h3 id="使用样例"><a href="#使用样例" class="headerlink" title="使用样例"></a>使用样例</h3><pre class=" language-md"><code class="language-md">```sequenceAndrew->China: Says HelloNote right of China: China thinks\nabout itChina-->Andrew: How are you?Andrew->>China: I am good thanks!```</code></pre>]]></content>
      
      
      <categories>
          
          <category> 通用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用python从c代码文件中读取一个函数</title>
      <link href="/fblog/2021/02/04/python-get-cfun/"/>
      <url>/fblog/2021/02/04/python-get-cfun/</url>
      
        <content type="html"><![CDATA[<p>读取C文件中函数，可能存在多种字符集的情况，需要多次尝试</p><pre class=" language-python"><code class="language-python">file_path <span class="token operator">=</span> <span class="token string">"test_file_name.c"</span>fun_name <span class="token operator">=</span> <span class="token string">"test_function"</span>rule <span class="token operator">=</span> r<span class="token string">'\w+\**? \**?'</span> <span class="token operator">+</span> fun_name <span class="token operator">+</span> <span class="token string">'\(.*?\).*?\n\{.*?\n\}'</span>charsets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"GBK"</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">,</span> <span class="token string">"BIG5"</span><span class="token punctuation">,</span> <span class="token string">"ASCII"</span><span class="token punctuation">]</span><span class="token keyword">for</span> charset <span class="token keyword">in</span> charsets<span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span>charset<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>temp_str <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>rule<span class="token punctuation">,</span> data<span class="token punctuation">,</span> re<span class="token punctuation">.</span>DOTALL<span class="token punctuation">)</span><span class="token keyword">for</span> temp <span class="token keyword">in</span> temp_str<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/fblog/2021/02/01/hello-world/"/>
      <url>/fblog/2021/02/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
